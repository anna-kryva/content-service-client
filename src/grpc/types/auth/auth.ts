// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               unknown
// source: auth/auth.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface ValidationData {
  accessToken: string;
}

export interface UserData {
  sub: string;
  email: string;
  iat: number;
  exp: number;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  validateUser(request: ValidationData, metadata: Metadata, ...rest: any): Observable<UserData>;
}

export interface AuthServiceController {
  validateUser(
    request: ValidationData,
    metadata: Metadata,
    ...rest: any
  ): Promise<UserData> | Observable<UserData> | UserData;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["validateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
